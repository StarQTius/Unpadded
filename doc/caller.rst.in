Implementing caller side
========================

On the caller side, requesting a remote device to invoke a function is pretty much like a regular function invocation. The types of the arguments are checked at compile-time. The type of the return value is also available at compile-time.

What @PROJECT_NAME@ does for you is generating the packet and sending them byte by byte with a user-provided callback. What remains to be handled is the implementation of the aforesaid callback and the packets encapsulation, if you need one.

The following sections will assume these functions to be defined by the master device:

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/caller1
  :language: cpp

Basics : sending request with keys
----------------------------------

Preparing a packet for a request is done by using keys from the corresponding keyring. Let say we defined a ``keyring`` object holding the function ``f`` of signature ``void(std::uint8_t, std::uint16_t)``.

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/caller2
  :language: cpp

If argument types does not match, the compiler will tell you.

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/caller3
  :language: cpp

Once sent, the packet must be received by a dispatcher. See :ref:`receive-request`.

Example
~~~~~~~

In the follwing example, we are requesting the slave device to spiral faster and faster.

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/motion_keyring1.hpp
  :language: cpp
  :caption: motion_keyring.hpp

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/motion_keyring1.hpp
  :language: cpp
  :caption: master.cpp

Handling the callee response
----------------------------

You are free to ignore the result of an invocation request if you don't need it. @PROJECT_NAME@ won't handle the response from the callee automatically. If you need to, there is two different way to proceed. Either you send a request then wait until the slave device is done (blocking mode) or you hook a callback to be invoked when receiving a response from the slave device (non-blocking mode).

Blocking mode
~~~~~~~~~~~~~

In blocking mode, keys must be used to extract the invocaiton request result out of the packet sent back to the master device.

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/caller4
  :language: cpp

Non-blocking mode
~~~~~~~~~~~~~~~~~

In non-blocking mode, the ``action`` class must be used to store a callback for later.

.. literalinclude:: /@PROJECT_SOURCE_DIR@/test/snippet/caller5.cpp
  :language: cpp

``action`` is non-templated, so it is suitable for storage.

API References
--------------

.. doxygenclass:: upd::key
  :members:

.. doxygenclass:: upd::action
  :members:
