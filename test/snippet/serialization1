constexpr upd::byte_t header[4] = {0xff, 0xff, 0xff, 0xff};

// We fill our tuple with the header and the data and keep
// some room for the CRC.
upd::tuple output_tuple{
  upd::big_endian,
  upd::ones_complement,
  header,
  std::uint32_t{64},
  std::uint32_t{32},
  std::uint16_t{}
};

// We calculate the CRC from the data fields
upd::set<3>(output_tuple, calculate_crc(output_tuple.begin() + 4, output_tuple.end() - 2));

// Finally we send the packet to the device
for (auto byte: output_tuple) write_byte_to_device(byte);

// We prepare the tuple for the reception of the response
upd::tuple<
  upd::endianess::BIG,
  upd::signed_mode::ONES_COMPLEMENT,
  upd::byte_t[4],
  std::int16_t,
  std::uint16_t,
  std::uint16_t>
input_tuple{};

// We receive the packet from the device (assuming
// `read_byte_from_device` did not get rid of the header)
for (auto &byte: input_tuple) byte = read_byte_from_device();

// Finally we handle the values from the remote device
auto &&[rcv_header, arg1, arg2, crc] = input_tuple;
assert(std::equal(rcv_header.begin(), rcv_header.end(), header));
assert(crc == calculate_crc(input_tuple.begin() + 4, input_tuple.end() - 2));

return arg1 + arg2;
