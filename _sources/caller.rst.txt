Implementing caller side
========================

On the caller side, requesting a remote device to invoke a function is pretty much like a regular function invocation. The types of the arguments are checked at compile-time. The type of the return value is also available at compile-time.

What Unpadded does for you is generating the packet and sending them byte by byte with a user-provided callback. What remains to be handled is the implementation of the aforesaid callback and the packets encapsulation, if you need one.

The following sections will assume these functions to be defined by the master device:

.. code-block:: cpp

  void write_byte_to_slave(upd::byte_t);
  upd::byte_t read_byte_from_slave();

Basics : sending request with keys
----------------------------------

Preparing a packet for a request is done by using keys from the corresponding keyring. Let say we defined a ``keyring`` object holding the function ``f`` of signature ``void(std::uint8_t, std::uint16_t)``.

.. code-block:: cpp

  // We create a key to `f`.
  auto key = keyring.get<f>();

  // Then we generate the packet and write every byte of it to the slave device.
  // On the remote device, ``f`` will be invoked on the arguments ``16`` and ``64``.
  key(16, 64).write_all(write_byte_to_master);

  // This line does the same thing, but with another syntax.
  key(16, 64) >> write_byte_to_master;

If argument types does not match, the compiler will tell you.

.. code-block:: cpp

  std::uint8_t array[] = {0x00, 0x11, 0x22};
  auto key = keyring.get<f>();

  // What are you doing ?
  //      vvvvv
  key(16, array).write_all(write_byte_to_master);

Once sent, the packet must be received by a dispatcher. See :ref:`receive-request`.

Example
~~~~~~~

In the follwing example, we are requesting the slave device to spiral faster and faster.

.. code-block:: cpp
  :caption: motion_keyring.hpp

  #pragma once

  #include <cstdint>

  #include <upd/keyring.hpp>
  #include <upd/typelist.hpp>

  void set_forward_speed(std::uint32_t);
  void set_left_steering_speed(std::uint32_t);
  void set_right_steering_speed(std::uint32_t);

  constexpr upd::keyring motion_keyring{
    upd::flist<set_forward_speed, set_left_steering_speed, set_right_steering_speed>,
    upd::little_endian,
    upd::two_complement
  };

.. code-block:: cpp
  :caption: master.cpp

  #include "motion_keyring.hpp"

  int main() {
    for(std::uint32_t speed = 0; speed < 20000; speed++) {
      auto set_forward_speed_k = motion_keyring.get<set_forward_speed>();
      auto set_left_steering_speed_k = motion_keyring.get<set_left_steering_speed>();

      set_forward_speed_k(speed).write_all(write_byte_to_slave);
      set_left_steering_speed_k(speed).write_all(write_byte_to_slave);
    }

    return 0;
  }

Handling the callee response
----------------------------

You are free to ignore the result of an invocation request if you don't need it. Unpadded won't handle the response from the callee automatically. If you need to, there is two different way to proceed. Either you send a request then wait until the slave device is done (blocking mode) or you hook a callback to be invoked when receiving a response from the slave device (non-blocking mode).

Blocking mode
~~~~~~~~~~~~~

In blocking mode, keys must be used to extract the invocaiton request result out of the packet sent back to the master device.

.. code-block:: cpp

  // We assume that a `keyring` object has been defined and holds a function `f` of signature `std::uint8_t(std::uint16_t)`

  auto key = keyring.get<f>();

  // First we send a request to the slave device
  key(64).write_all(write_byte_to_slave);

  // Let's wait a little for the slave device to completely fulfill the request

  // Then we receive its response
  // `x` type is `std::uint8_t`
  auto x = key.read_all(read_byte_from_slave);

Non-blocking mode
~~~~~~~~~~~~~~~~~

In non-blocking mode, the ``action`` class must be used to store a callback for later.

.. code-block:: cpp

  // We assume that a `keyring` object has been defined and holds a function `f` of signature `std::uint8_t(std::uint16_t)`

  static upd::action action;

  void send_request() {
    auto key = keyring.get<f>();

    // We send the request...
    key(64).write_all(write_byte_to_slave);

    // ...and then, we save our callback for later
    action = key.with_hook([](auto x) { /** processing the response **/ });
  }

  void process_response() {
    // Our callback is called !
    action(read_byte_from_slave);
  }

  int main() {
    send_request();

    // Meanwhile, we do other stuff...

    process_response();

    return 0;
  }


``action`` is non-templated, so it is suitable for storage.

API References
--------------

.. doxygenclass:: upd::key
  :members:

.. doxygenclass:: upd::action
  :members:
